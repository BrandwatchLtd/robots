
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  TOKEN_MANAGER_USES_PARSER = false;
  TOKEN_EXTENDS = "";
  TOKEN_FACTORY = "";
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(RobotsParserImpl)

package com.brandwatch.robots.parser;

/*
 * #%L
 * Robots (core)
 * %%
 * Copyright (C) 2015 Brandwatch
 * %%
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Brandwatch nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

public class RobotsParserImpl implements RobotsParser {
}

PARSER_END(RobotsParserImpl)

SKIP :
{
    " " | "\t" | "\f"
}

SKIP :
{
  < "#" (~["\n", "\r"])* >
}

TOKEN : {
    < EOL: ( "\r\n" | "\n" | "\r") >
    | < NUL: "\0" >
}

<DEFAULT>
TOKEN [IGNORE_CASE] :
{
    < USER_AGENT: "user-agent" >
    | < ALLOW: "allow" >
    | < DISALLOW: "disallow" >
    | < SITE_MAP: "sitemap" >
    | < OTHER_FIELD: ( ~[":", "\n", "\r", "#", "\0"] )+ >
}

<DEFAULT>
TOKEN :
{
    < DELIMITER: [":"] (" "  | "\t" | "\f")* > : IN_TEXT_VALUE
}


<IN_TEXT_VALUE>
TOKEN:
{
  <TEXT_VALUE: ( ~["\n", "\r", "#", "\0"] )* > : DEFAULT
}

void parse(RobotsParseHandler handler) : {}
{
    ( <EOL> )*
    (
        nonGroupLine(handler)
        |
        otherLine(handler)
    )*
    ( entry(handler) )*
    <EOF>
}

void entry(RobotsParseHandler handler) : {}
{
    { handler.startEntry(); }
    ( LOOKAHEAD(1) startGroupLine(handler) )+
    (
        groupMemberLine(handler)
        |
        nonGroupLine(handler)
        |
        otherLine(handler)
    )*
    { handler.endEntry(); }
}

void startGroupLine(RobotsParseHandler handler) : {}
{
    <USER_AGENT> <DELIMITER> { handler.userAgent(textValue()); } eol()
}

void groupMemberLine(RobotsParseHandler handler) : {}
{
    (
        <ALLOW> <DELIMITER> { handler.allow(textValue()); }
    |
        <DISALLOW> <DELIMITER> { handler.disallow(textValue()); }
    ) eol()
}

void nonGroupLine(RobotsParseHandler handler) : {}
{
    <SITE_MAP> <DELIMITER> { handler.siteMap(textValue()); } eol()
}

void otherLine(RobotsParseHandler handler) : {
    Token field;
    String value;
}
{
    field = <OTHER_FIELD> <DELIMITER> value = textValue() eol()
    { handler.otherDirective(field.image, value); }
}


String textValue() : {
    Token token;
}
{
    (
        token = <TEXT_VALUE>
        {
            return token.image.trim();
        }
    |
        <EOF>
        {
            return "";
        }
    )
}

void eol() : {}
{
    ((<EOL>)+ | <EOF>)
}
