
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  TOKEN_MANAGER_USES_PARSER = false;
  TOKEN_EXTENDS = "";
  TOKEN_FACTORY = "";
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(RobotsParser)

package com.brandwatch.robots.parser;

public class RobotsParser {
}

PARSER_END(RobotsParser)

SKIP :
{
    " " | "\t" | "\f"
}

SKIP :
{
  < "#" (~["\n", "\r"])* >
}

TOKEN : {
    < EOL: ( "\n\r" | "\n" | "\r") >
}

<DEFAULT>
TOKEN [IGNORE_CASE] :
{
    < USER_AGENT: "user-agent" >
    | < ALLOW: "allow" >
    | < DISALLOW: "disallow" >
    | < SITE_MAP: "sitemap" >
    | < OTHER_FIELD: ( ~[":", "\n", "\r", "#"] )+ >
}

<DEFAULT>
TOKEN :
{
    < DELIMITER: [":"] (" "  | "\t" | "\f")* > : IN_TEXT_VALUE
}


<IN_TEXT_VALUE>
TOKEN:
{
  <TEXT_VALUE: ( ~["\n", "\r", "#"] )* > : DEFAULT
}

void parse(RobotsParseHandler handler) : {}
{
    ( <EOL> )*
    (
        nonGroupLine(handler)
        |
        otherLine(handler)
    )*
    ( entry(handler) )*
    <EOF>
}

void entry(RobotsParseHandler handler) : {}
{
    { handler.startEntry(); }
    ( LOOKAHEAD(1) startGroupLine(handler) )+
    (
        groupMemberLine(handler)
        |
        nonGroupLine(handler)
        |
        otherLine(handler)
    )*
    { handler.endEntry(); }
}

void startGroupLine(RobotsParseHandler handler) : {}
{
    <USER_AGENT> <DELIMITER> { handler.userAgent(textValue()); } eol()
}

void groupMemberLine(RobotsParseHandler handler) : {}
{
    (
        <ALLOW> <DELIMITER> { handler.allow(textValue()); }
    |
        <DISALLOW> <DELIMITER> { handler.disallow(textValue()); }
    ) eol()
}

void nonGroupLine(RobotsParseHandler handler) : {}
{
    <SITE_MAP> <DELIMITER> { handler.siteMap(textValue()); } eol()
}

void otherLine(RobotsParseHandler handler) : {
    Token field;
    String value;
}
{
    field = <OTHER_FIELD> <DELIMITER> value = textValue() eol()
    { handler.otherDirective(field.image, value); }
}


String textValue() : {
    Token token;
}
{
    (
        token = <TEXT_VALUE>
        {
            return token.image.trim();
        }
    |
        <EOF>
        {
            return "";
        }
    )
}

void eol() : {}
{
    ((<EOL>)+ | <EOF>)
}
